# name: Build and Upload VPN AMI
#
# on:
#   push:
#     branches:
#       - main
#     paths:
#       - 'flake.nix'
#       - 'services/vpn/configuration.nix' # Trigger if your VPN config changes
#       # Add other paths that might affect the build, e.g., sops files
#       - '.sops.yaml' # If you have a .sops.yaml file at root
#       - 'secrets/**' # If your sops secrets are in a 'secrets' directory
#
#   workflow_dispatch: # Allows manual trigger from GitHub UI
#
# jobs:
#   build-and-upload-ami:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#
#       # --- Nix Setup ---
#       - name: Install Nix
#         uses: cachix/install-nix-action@v20
#         with:
#           # Ensure Nix is installed with flakes enabled
#           extra_nix_config: |
#             experimental-features = nix-command flakes
#
#       - name: Configure Cachix (Optional, if you have a Nix cache)
#         uses: cachix/cachix-action@v12
#         with:
#           name: your-nix-cache-name # Replace with your Cachix cache name
#           # authToken: ${{ secrets.CACHIX_AUTH_TOKEN }} # Uncomment if your cache is private/requires auth
#
#       # --- AWS Credentials Setup (for sops-nix and AMI upload) ---
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }} # Use the region where your S3 bucket is, and where you want the AMI created
#
#       # --- Build the VPN AMI with Nix ---
#       - name: Build VPN AMI
#         run: |
#           # The 'vpn' package in your flake outputs the result to ./result by default
#           # The `nixos-generators` `amazon` format creates a result directory containing `nix-support/image-info.json`
#           nix build .#vpn
#         env:
#           # SOPS_AWS_REGION: ${{ secrets.AWS_REGION }} # Only if sops needs region directly
#           # SOPS_KMS_ARN: "arn:aws:kms:your-region:your-account-id:key/your-kms-key-id" # If sops-nix uses KMS
#           # Pass any other SOPS related environment variables if necessary for decryption during the build
#           # See sops-nix documentation for how it expects keys or environment variables
#           # For example, if you use age keys directly, you'd pass SOPS_AGE_KEY here (carefully)
#           #
#           # IMPORTANT: Ensure your AWS credentials used by this action have permissions
#           # to decrypt the SOPS secrets if they are KMS-encrypted.
#
#       # --- Upload the AMI to AWS ---
#       - name: Upload AMI to AWS
#         run: |
#           # The result of `nix build .#vpn` is symlinked to ./result
#           # Ensure your S3 bucket exists: lab-images-jmkzsh1u9r2vsxdqtmq5hmrjur
#           # Ensure your AWS credentials have s3:PutObject and other necessary permissions.
#           # The `nix run github:NixOS/amis#upload-ami` expects the image-info.json
#           # from the result of the nixos-generators build.
#           nix run github:NixOS/amis#upload-ami \
#             -- \
#             --prefix "vpn-${{ github.sha }}-" \
#             --s3-bucket lab-images-jmkzsh1u9r2vsxdqtmq5hmrjur \
#             --image-info ./result/nix-support/image-info.json
#         env:
#           # The `upload-ami` script itself uses AWS credentials, which are
#           # picked up from the environment via `aws-actions/configure-aws-credentials`.
#           # You might need to set AWS_REGION here explicitly again if the upload-ami script
#           # doesn't pick it up by default, but typically it should.
#           AWS_REGION: ${{ secrets.AWS_REGION }}
